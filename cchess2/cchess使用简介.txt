【棋盘坐标】

	9 ┌─┬─┬─┬───┬─┬─┬─┐
	  │  │  │  │＼│／│　│　│　│
	8 ├─┼─┼─┼─※─┼─┼─┼─┤
	  │　│　│　│／│＼│　│　│　│
	7 ├─┼─┼─┼─┼─┼─┼─┼─┤
	  │　│　│　│　│　│　│　│　│
	6 ├─┼─┼─┼─┼─┼─┼─┼─┤
	  │　│　│　│　│　│　│　│　│
	5 ├─┴─┴─┴─┴─┴─┴─┴─┤
	  │　                         　 │
	4 ├─┬─┬─┬─┬─┬─┬─┬─┤
	  │　│　│　│　│　│　│　│　│
	3 ├─┼─┼─┼─┼─┼─┼─┼─┤
	  │　│　│　│　│　│　│　│　│
	2 ├─┼─┼─┼─┼─┼─┼─┼─┤
	  │　│　│　│＼│／│　│　│　│
	1 ├─┼─┼─┼─※─┼─┼─┼─┤
	  │　│　│　│／│＼│　│　│　│
	0 └─┴─┴─┴───┴─┴─┴─┘
	  0   1   2   3   4   5   6   7   8

【棋子编码】
大写是红方，小写是黑方

   'K': "帅",
   'k': "将",
   'A': "仕",
   'a': "士",
   'B': "相", 
   'b': "象",
   'N': "马",
   'n': "马",
   'R': "车",
   'r': "车",
   'C': "炮", 
   'c': "炮",
   'P': "兵", 
   'p': "卒" 

##########################################################################################
	下面是主要的数据结构和主要的函数的介绍
	通常只需要创建Board类就可以了，其他在过程中会自动创建
##########################################################################################

【位置类】Pos
	pos = Pos(x,y)
	# 不怎么用，通常只会用到(pos.x,pos.y)是棋子的棋盘坐标

【阵营类】ChessSide
	不用创建，直接用就好，例如ChessSide.RED或ChessSide.BLACK
	# 也不算类吧......妈的智障，用了个enum枚举，这也导致要多安装唯一的一个包。
	# python里面枚举类不能直接转换成int用，所以要自己转换：
		{ChessSide.RED:0, ChessSide.BLACK:1}[side]

【位移类】Move
	move = Move(board,p_from,p_to)
	# board是棋局类，后面会说，两个p都是位置类
	# 主要用到的是位移前位置move.p_from，位移后位置move.p_to，这两个都是位置类（见后文）
	# 我还用了move.to_chinese()转成中文表述

【棋子类】Piece
	piece = Piece(board,fench,pos)
	# board是棋局类，fench是编码，pos是位置类
1.获得所有可能位移
	piece.create_moves()
	# 返回一个列表，列表元素是[(pos_from,pos_to),(...),(...),...]
	# pos_from和pos_to是位置类

【棋局类】Board
1.从字符串初始化棋局
	board = Board(FULL_INIT_FEN)
	# 通过构造函数Board(str)，构造新棋局
	# 普通的全盘棋局使用内置的 FULL_INIT_FEN ，就可以了
2.获得棋盘二维list
	board.get_board()
	# 返回的是一个垂直反转的棋盘，红黑颠倒，print一下就明白了
	# 使用的时候也方便，只需i = y，j = x就行
3.走子
	board.move(pos_from,pos_to)
	# 将pos_from的棋子走到pos_to
	# 其中会自动调用合理判定，若走步不合理，返回None，否者返回一个Move类（见后文）
4.通过位置获得棋子
	board.get_piece(pos)
	# pos是位置类
	# 返回一个棋子类
5.获得一方所有的棋子
	board.get_side_pieces(side)
	# side是阵营类
	# 返回棋子类的列表
6.画图
	borad.print_board()
7.将军
	board.is_checked()
	# 在move完之后用来判断是否正在将军
	# 返回正在将军的棋子棋子数
8.将死
	board.is_checkmate()
	# 在move完之后用来判断是否已经将死
9.判断一个动作是否会将军
	id_checked_move(pos_from, pos_to)
	# 其实就是内部创建了个副本执行了一下，再调用is_checked看有没有将军而已